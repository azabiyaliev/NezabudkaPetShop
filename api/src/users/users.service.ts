import {
  BadRequestException,
  ConflictException,
  ForbiddenException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { User } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import * as nodemailer from 'nodemailer';
import * as process from 'node:process';
import { regEmail, regPhone } from '../auth/auth.service';
import { CreateDto } from '../dto/user.dto';
import { v4 as uuidv4 } from 'uuid';

@Injectable()
export class UsersService {
  private transporter: nodemailer.Transporter;

  constructor(private prisma: PrismaService) {
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });
  }

  async findPasswordResetRecordByToken(resetToken: string) {
    return this.prisma.passwordReset.findFirst({
      where: { resetToken },
    });
  }

  async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  private async validateUser(id: number) {
    const user = await this.prisma.user.findFirst({
      where: { id },
    });

    if (!user) {
      throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    return user;
  }

  async resetPasswordByToken(userId: number, newPassword: string) {
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    await this.prisma.user.update({
      where: { id: userId },
      data: { password: hashedPassword },
    });

    return { message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω' };
  }

  async sendPasswordResetLink(email: string): Promise<{ message: string }> {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user) {
      throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const resetToken: string = uuidv4();
    const resetLink = `${process.env.FRONTEND_URL}/change-password?token=${resetToken}`;

    await this.prisma.passwordReset.create({
      data: {
        userId: user.id,
        resetToken,
        createdAt: new Date(),
      },
    });

    const emailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
      html: `
  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background-color: #f9f9f9;">
    <h2 style="color: #344C3D;">üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
    <p style="font-size: 16px; color: #333;">
      –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –≤—ã ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
    </p>
    <div style="text-align: center; margin: 30px 0;">
     <a href="${resetLink}">${resetLink}</a>
    </div>
    <p style="font-size: 14px; color: #666;">
      –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
    </p>
    <hr style="margin: 30px 0;" />
    <p style="font-size: 12px; color: #999;">
      –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br />
      –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Nezabudka üêæ
    </p>
  </div>
`,
    };

    try {
      await this.transporter.sendMail(emailOptions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞');
    }

    return { message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É' };
  }

  async validateResetToken(
    userId: number,
    resetToken: string,
  ): Promise<boolean> {
    const record = await this.prisma.passwordReset.findFirst({
      where: {
        userId,
        resetToken,
        createdAt: { gte: new Date(Date.now() - 60 * 60 * 1000) },
      },
    });

    if (!record) {
      throw new NotFoundException(
        '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫',
      );
    }

    return true;
  }

  async updatePassword(
    userId: number,
    currentPassword: string,
    newPassword: string,
  ): Promise<{ message: string }> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    await this.prisma.user.update({
      where: { id: userId },
      data: { password: hashedPassword },
    });

    return { message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' };
  }

  async createAdmin(createDto: CreateDto) {
    const { email, firstName, secondName, password, role } = createDto;
    let phone = createDto.phone;

    if (password.includes(' ')) {
      throw new ConflictException('–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É—Å—Ç—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤');
    }

    if (!regEmail.test(email)) {
      throw new BadRequestException('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—á—Ç—ã');
    }

    if (phone) {
      if (!regPhone.test(phone)) phone = phone.replace(/\s/g, '');
      if (!phone.startsWith('+996')) {
        phone = '+996' + phone.replace(/^0/, '');
      }
    }

    const existingUser = await this.prisma.user.findUnique({
      where: { email },
    });
    const existingPhone = phone
      ? await this.prisma.user.findUnique({ where: { phone } })
      : null;

    if (existingUser) {
      throw new ConflictException(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
      );
    }

    if (existingPhone) {
      throw new ConflictException(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º ${phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
      );
    }

    if (role === 'superAdmin') {
      const existingProtectedUser = await this.prisma.user.findFirst({
        where: { isProtected: true },
      });

      if (existingProtectedUser) {
        throw new ConflictException('–°—É–ø–µ—Ä –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const user = await this.prisma.user.create({
      data: {
        email,
        firstName,
        secondName,
        password: hashedPassword,
        phone: phone?.trim() === '' ? null : phone,
        role: role ? role : undefined,
        token: crypto.randomUUID(),
      },
    });

    return { message: '–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', user };
  }

  async findAll() {
    const result = await this.prisma.user.findMany();
    if (result.length === 0) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    return result;
  }

  async findSuperAdmin() {
    const result = await this.prisma.user.findFirst({
      where: {
        role: 'superAdmin',
        isProtected: true,
      },
    });

    if (!result) {
      throw new NotFoundException('–°—É–ø–µ—Ä–∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return result;
  }

  async findALlAdmins() {
    const result = await this.prisma.user.findMany({
      where: { role: 'admin' },
    });

    if (!result) {
      throw new NotFoundException('–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    return result;
  }

  async findOneAdmin(id: string) {
    try {
      const parsId = parseInt(id);
      const user = await this.prisma.user.findFirst({
        where: { id: parsId },
      });

      if (!user) {
        throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      return {
        firstName: user.firstName,
        secondName: user.secondName,
        email: user.email,
        phone: user.phone,
        role: user.role,
      };
    } catch (error) {
      console.error('findOne error:', error);
      throw error;
    }
  }

  async findOne(id: number) {
    try {
      const user = await this.prisma.user.findFirst({
        where: { id },
      });

      if (!user) {
        throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
      return user;
    } catch (error) {
      console.error('findOne error:', error);
      throw error;
    }
  }

  async delete(id: string) {
    const parsId = parseInt(id);
    const user = await this.validateUser(parsId);

    if (user.role === 'superAdmin') {
      throw new ForbiddenException('–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å');
    }

    if (user.isProtected) {
      throw new ForbiddenException('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—â–∏—â—ë–Ω –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è');
    }

    await this.prisma.user.delete({ where: { id: parsId } });
    return { message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID ${id} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ` };
  }

  async update(id: string, data: Partial<User>, currentUser: User) {
    const userId = parseInt(id);
    const user = await this.validateUser(userId);

    const isTargetSuperAdmin = user.role === 'superAdmin';
    const isRequesterSuperAdmin = currentUser.role === 'superAdmin';
    const isSelfEdit = currentUser.id === user.id;

    if (isTargetSuperAdmin && (!isRequesterSuperAdmin || !isSelfEdit)) {
      throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    if (data.password !== undefined) {
      const salt = await bcrypt.genSalt(10);
      data.password = await bcrypt.hash(data.password.toString(), salt);
    }

    await this.prisma.user.update({
      where: { id: userId },
      data,
    });

    return this.prisma.user.update({
      where: { id: userId },
      data,
    });
  }
}
