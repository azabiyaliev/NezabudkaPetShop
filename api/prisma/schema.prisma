// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  firstName     String
  secondName    String
  password      String
  phone         String?         @unique
  role          Role            @default(client)
  token         String?
  googleID      String?         @unique
  facebookID    String?         @unique
  Order         Order[]
  Review        Review[]
  Comment       Comment[]
  PasswordReset PasswordReset[]

  @@map("users")
}

enum Role {
  client
  admin
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  resetCode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("passwordReset")
}

model Brand {
  id    Int    @id @default(autoincrement())
  title String @unique
  logo  String

  products Products[]

  @@map("brands")
}

model SiteEdition {
  id          Int    @id @default(autoincrement())
  instagram   String
  whatsapp    String
  schedule    String
  address     String
  email       String
  phone       String
  linkAddress String

  @@map("editionSite")
}

model PhotoByCarousel {
  id    Int    @id @default(autoincrement())
  photo String
  link  String @default("")
  order Int    @default(0)

  @@map("photo_by_carousel")
}

model Category {
  id            Int        @id @default(autoincrement())
  title         String     @unique
  parentId      Int?       @map("parent_id")
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")

  products Products[]

  @@map("categories")
}

model Products {
  id Int @id @default(autoincrement())

  productName        String  @map("product_name")
  productPhoto       String  @map("product_photo")
  productPrice       Int     @map("product_price")
  productDescription String  @map("product_description")
  productComment     String? @map("product_comment")

  existence Boolean @default(true)
  sales     Boolean @default(false)

  orderItem  OrderItem[]
  brandId    Int?        @map("brand_id")
  brand      Brand?      @relation(fields: [brandId], references: [id])
  categoryId Int?        @map("category_id")
  category   Category?   @relation(fields: [categoryId], references: [id])

  reviews Review[]

  @@map("products")
}

model Order {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId    Int         @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  orderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  id Int @id @default(autoincrement())

  quantity Int
  status   OrderStatus @default(inProcess)

  productId Int?      @map("product_id")
  products  Products? @relation(fields: [productId], references: [id])
  orderId   Int?      @map("order_id")
  order     Order?    @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}

enum OrderStatus {
  inProcess
  onTheWay
  isDelivered
  Canceled
}

model Review {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int?
  text      String?
  product   Products  @relation(fields: [productId], references: [id])
  productId Int
  comments  Comment[]
  createdAt DateTime  @default(now())

  @@map("reviews")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  Int
  comment   String
  createdAt DateTime @default(now())

  @@map("comments")
}
